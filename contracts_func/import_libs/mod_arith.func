;; File Path: /modules/mod_arith.func   

#pragma version =0.4.0;
#include "stdlib.fc";   
(int) mod(int x, int y) asm "MOD";
(int) divc(int x, int y) asm "DIVC";
slice preload_bits_offset(slice s, int offset, int len) asm "SDSUBSTR";
int builder_null?(builder b) asm "BUILDER_NULL";
(slice, slice) load_slice(slice s) asm( -> 1 0) "LDSLICE";
(slice, int) load_slice(slice s) asm "LDSLICE";
(slice, int) load_slice(slice s, int len) asm "SDCUTFIRST";
(int, slice, int) load_msg_addr(slice s) asm( -> 1 0) "LDMSGADDR";
(int, slice, int) load_msg_addr(slice s) asm "LDMSGADDR";
(slice, int) load_msg_addr(slice s, int len) asm "SDCUTFIRST";
int builder_bits(builder b) asm "BUILDER_BITS";
int builder_ref(builder b) asm "BUILDER_REF";
builder store_builder(builder to, builder from) asm "STBR";

int cell_depth(cell c) asm "CDEPTH";

(int, int, int) calc_boc_size(builder b) asm "BOCSIZE";
(int, int, int) calc_boc_size(slice s) asm "BOCSIZE";

int boc_empty?(slice s) asm "BOC_EMPTY";

builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
;; ==================================================================================================================================================================================================================================================================================================================================================================================================================                                                                      

;; ==================================================================================================================================================================================================================================================================================================================================================================================================================
() mod_arith() impure asm "0x01 SETCODE";


;; ==================================================================================================================================================================================================================================================================================================================================================================================================================

    ;; ==================================================================================================================================================================================================================================================================================================================================================================================================================                                                                      
    ;; ==================================================================================================================================================================================================================================================================================================================================================================================================================                                                                      
    ;; ==================================================================================================================================================================================================================================================================================================================================================================================================================
        
;;     var (int gas_used, stack) = invoke_method(get_gas_config_param, []);
;;     throw_unless(100, stack.first() == gas::gas_price);
;;     throw_unless(101, stack.second() == gas::flat_gas_limit);
;;     throw_unless(102, stack.third() == gas::flat_gas_price);

;;     var (int gas_used, stack) = invoke_method(get_gas_config_param, []);
;;     throw_unless(100, stack.first() == gas::gas_price);
;;     throw_unless(101, stack.second() == gas::flat_gas_limit);
;;     throw_unless(102, stack.third() == gas::flat_gas_price);


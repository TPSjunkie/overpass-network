#include "stdlib.fc";
#include "op-codes.fc";

const ONE_TON = 1000000000;
const const::tx_fee_send_jetton = 40000000;  ;; 0.04 TON
const FIELD_SIZE = 52435875175126190479447740508185965837690552500527637822603658699938581184513;

const op::register_deposit = 0x888;
const op::register_withdraw = 0x777;
const op::update_deposit_root = 0x666;
const op::update_withdraw_root = 0x555;
const error::verify_failed_double_spend = 107;

const CHUNK_TREE_HEIGHT = 5;
const CHUNK_SIZE = 1 << CHUNK_TREE_HEIGHT;
global int tx_fee_send_reward_miner;  ;; 0.4 TON

;; Load data
(cell, cell, cell) load_data() impure {
    var ds = get_data().begin_parse();
    cell depositData = ds~load_ref();
    cell withdrawData = ds~load_ref();
    cell governance = ds~load_ref();
    return (depositData, withdrawData, governance);
}

;; Save data
() save_data(cell depositData, cell withdrawData, cell governance) impure {
    set_data(
        begin_cell()
        .store_ref(depositData)
        .store_ref(withdrawData)
        .store_ref(governance)
        .end_cell()
    );
}

;; Parse tree data
(int, int, cell, int, int, cell) parse_tree_data(cell data) impure {
    slice data_slice = data.begin_parse();
    int currentRoot = data_slice~load_uint(256);
    int previousRoot = data_slice~load_uint(256);
    int length = data_slice~load_uint(32);
    int lastProcessedLeaf = data_slice~load_uint(32);
    cell history = data_slice~load_dict();
    cell history_cache = data_slice~load_dict();
    return (currentRoot, previousRoot, history, length, lastProcessedLeaf, history_cache);
}

;; Mint token
() mint_token(slice recipient, int amount, slice JETTON_MASTER_ADDRESS) impure inline {
    var msg = begin_cell()
    .store_uint(0x18, 6)  ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress
    .store_slice(JETTON_MASTER_ADDRESS)
    .store_coins(const::tx_fee_send_jetton)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(21, 32)
    .store_uint(0, 64)
    .store_slice(recipient)
    .store_coins(20000000)
    .store_ref(
        begin_cell().store_uint(0x178d4519, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(JETTON_MASTER_ADDRESS)
        .end_cell()
    );
    send_raw_message(msg.end_cell(), 1);  ;; paying fees, revert on errors
}

;; Send TON
() send_ton(slice recipient, int amount) impure inline {
    var msg = begin_cell()
    .store_uint(0x10, 6)  ;; nobounce
    .store_slice(recipient)
    .store_grams(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();
    send_raw_message(msg, 1);
}

;; Main contract function
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    (cell depositData, cell withdrawData, cell governance) = load_data();
    (int depositRoot, int previousDepositRoot, cell deposits, int depositsLength, int lastProcessedDepositLeaf, cell deposits_cache) = parse_tree_data(depositData);
    (int withdrawRoot, int previousWithdrawRoot, cell withdraws, int withdrawsLength, int lastProcessedWithdrawLeaf, cell withdraws_cache) = parse_tree_data(withdrawData);

    int op = in_msg_body~load_uint(32);
    
    if (op == op::register_deposit) {
        cell commitment = in_msg_body~load_ref();
        slice commitment_slice = commitment.begin_parse();
        int commitment_value = commitment_slice~load_uint(256);
        int now = commitment_slice~load_uint(32);
        int instance_id = commitment_slice~load_uint(32);

        int hash_leaf = cell_hash(begin_cell().store_uint(commitment_value, 256).store_uint(instance_id, 32).store_uint(now, 32).end_cell());
        (_, int found) = deposits_cache.udict_get?(256, hash_leaf);
        throw_if(error::verify_failed_double_spend, found);

        deposits_cache~udict_set(256, hash_leaf, begin_cell().store_uint(1, 1).end_cell().begin_parse());
        deposits~udict_set(32, depositsLength, begin_cell().store_uint(hash_leaf, 256).end_cell().begin_parse());

        depositsLength += 1;
        save_data(
            pack_tree_data(depositRoot, previousDepositRoot, deposits, depositsLength, lastProcessedDepositLeaf, deposits_cache),
            withdrawData,
            governance
        );
        return ();
    }
    
    if (op == op::register_withdraw) {
        cell nullifier_hash = in_msg_body~load_ref();
        slice nullifier_hash_slice = nullifier_hash.begin_parse();
        int nullifier_hash_value = nullifier_hash_slice~load_uint(256);
        int now = nullifier_hash_slice~load_uint(32);
        int instance_id = nullifier_hash_slice~load_uint(32);

        int hash_leaf = cell_hash(begin_cell().store_uint(nullifier_hash_value, 256).store_uint(instance_id, 32).store_uint(now, 32).end_cell());
        (_, int found) = withdraws_cache.udict_get?(256, hash_leaf);
        throw_if(error::verify_failed_double_spend, found);

        withdraws_cache~udict_set(256, hash_leaf, begin_cell().store_uint(1, 1).end_cell().begin_parse());
        withdraws~udict_set(32, withdrawsLength, begin_cell().store_uint(hash_leaf, 256).end_cell().begin_parse());

        withdrawsLength += 1;
        save_data(
            depositData,
            pack_tree_data(withdrawRoot, previousWithdrawRoot, withdraws, withdrawsLength, lastProcessedWithdrawLeaf, withdraws_cache),
            governance
        );
        return ();
    }
}


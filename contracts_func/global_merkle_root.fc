;; ./contracts/global_merkle_root.fc

#pragma version >=0.2.0;

#include "./import_libs/stdlib.fc";

;; ===========================================================
;; 1. Constants and Parameters
;; ===========================================================

const int EPOCH_LENGTH = 604800;  ;; Epoch length (1 week)

;; ===========================================================
;; 2. Storage Variables
;; ===========================================================

global int current_global_root;        ;; Global Merkle root for all channels
global int last_submission_time;       ;; Last time the Merkle root was updated
global int governance_allowed;         ;; Governance flag to allow root update
global slice owner_address;            ;; Owner address of the contract

;; ===========================================================
;; 3. Data Persistence
;; ===========================================================

;; Load the current state from storage
(int, int, int, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(256),  ;; current_global_root
        ds~load_uint(64),   ;; last_submission_time
        ds~load_uint(1),    ;; governance_allowed
        ds~load_msg_addr()  ;; owner_address
    );
}

;; Save the updated state into storage
() save_data(int root, int submission_time, int gov_allowed, slice owner) impure inline {
    set_data(begin_cell()
        .store_uint(root, 256)
        .store_uint(submission_time, 64)
        .store_uint(gov_allowed, 1)
        .store_slice(owner)
        .end_cell());
}

;; ===========================================================
;; 4. Global Root Management
;; ===========================================================

;; Submit global root at the end of an epoch
() submit_global_root(int new_root) impure {
    (int current_root, int last_time, int gov_allowed, slice owner) = load_data();
    int current_time = now();
    throw_if(1001, current_time < last_time + EPOCH_LENGTH);  ;; Ensure an epoch has passed

    current_global_root = new_root;
    last_submission_time = current_time;
    save_data(new_root, current_time, gov_allowed, owner);
}

;; Governance-based root update
() governance_update_root(int new_root) impure {
    (int current_root, int last_time, int gov_allowed, slice owner) = load_data();
    throw_if(1002, gov_allowed == 0);  ;; Ensure governance update is allowed

    current_global_root = new_root;
    governance_allowed = 0;
    save_data(new_root, last_time, 0, owner);
}

;; ===========================================================
;; 5. Getter Functions
;; ===========================================================

int get_current_global_root() method_id {
    (int root, _, _, _) = load_data();
    return root;
}

int get_last_submission_time() method_id {
    (_, int time, _, _) = load_data();
    return time;
}

int is_governance_allowed() method_id {
    (_, _, int allowed, _) = load_data();
    return allowed;
}

;; ===========================================================
;; 6. Initialization and Governance Control
;; ===========================================================

;; Initialize the contract
() init_contract(int initial_root) impure {
    current_global_root = initial_root;
    last_submission_time = now();
    governance_allowed = 0;
    owner_address = my_address();
    save_data(initial_root, last_submission_time, governance_allowed, owner_address);
}

;; Enable governance updates
() enable_governance() impure {
    (int root, int time, _, slice owner) = load_data();
    save_data(root, time, 1, owner);
}

;; Disable governance updates
() disable_governance() impure {
    (int root, int time, _, slice owner) = load_data();
    save_data(root, time, 0, owner);
}

;; ===========================================================
;; 7. Unilateral Channel Management
;; ===========================================================

(int, int, slice, int) load_channel_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),   ;; seqno
        ds~load_coins(),    ;; balance
        ds~load_msg_addr(), ;; owner_address
        ds~load_uint(32)    ;; channel_id
    );
}

() save_channel_data(int seqno, int balance, slice owner_address, int channel_id) impure inline {
    set_data(begin_cell()
        .store_uint(seqno, 32)
        .store_coins(balance)
        .store_slice(owner_address)
        .store_uint(channel_id, 32)
        .end_cell());
}

cell calculate_channel_state_init(int seqno, int balance, slice owner_address, slice counterparty) inline {
    return begin_cell()
        .store_uint(seqno, 32)
        .store_coins(balance)
        .store_slice(owner_address)
        .store_slice(counterparty)
        .end_cell();
}

slice calculate_channel_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_uint(0, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

;; ===========================================================
;; 8. zk-SNARK Proof Verification
;; ===========================================================

slice hash_sha256(slice data) inline {
    return begin_cell().store_uint(slice_hash(data), 256).end_cell().begin_parse();
}
int verify_plonky2_proof(slice proof, slice public_inputs) inline {
    int proof_size = proof~load_uint(32);
    slice proof_data = proof~load_bits(proof_size * 8);
    slice public_inputs_hash = hash_sha256(public_inputs);
    slice hashed_proof = hash_sha256(proof_data);
    return equal_slices(hashed_proof, public_inputs_hash);
}

;; ===========================================================
;; 9. Main Contract Logic
;; ===========================================================

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    if (op == 1) {  ;; Submit global root
        int new_root = in_msg_body~load_uint(256);
        submit_global_root(new_root);
    } elseif (op == 2) {  ;; Governance update root
        int new_root = in_msg_body~load_uint(256);
        governance_update_root(new_root);
    } elseif (op == 3) {  ;; Enable governance
        enable_governance();
    } elseif (op == 4) {  ;; Disable governance
        disable_governance();
    } elseif (op == 5) {  ;; Init channel
        (int seqno, int balance, slice owner_address, int channel_id) = load_channel_data();
        throw_unless(401, equal_slices(sender_address, owner_address));
        int new_channel_id = in_msg_body~load_uint(32);
        slice counterparty = in_msg_body~load_msg_addr();
        int init_balance = in_msg_body~load_coins();
        cell state_init = calculate_channel_state_init(seqno, init_balance, my_address(), counterparty);
        slice channel_address = calculate_channel_address(state_init);
        save_channel_data(seqno + 1, init_balance, owner_address, new_channel_id);
    } elseif (op == 6) {  ;; Channel update
        (int seqno, int balance, slice owner_address, int channel_id) = load_channel_data();
        throw_unless(401, equal_slices(sender_address, owner_address));
        int new_balance = in_msg_body~load_coins();
        save_channel_data(seqno + 1, new_balance, owner_address, channel_id);
    } elseif (op == 7) {  ;; Verify Plonky2 proof
        cell proof_cell = in_msg_body~load_ref();
        cell public_inputs_cell = in_msg_body~load_ref();
        slice proof = proof_cell.begin_parse();
        slice public_inputs = public_inputs_cell.begin_parse();
        
        int is_valid = verify_plonky2_proof(proof, public_inputs);
        throw_unless(402, is_valid);
        
        (int seqno, int balance, slice owner_address, int channel_id) = load_channel_data();
        save_channel_data(seqno + 1, balance, owner_address, channel_id);
        
        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(seqno, 64)
            .store_uint(1, 1)  ;; Success flag
            .end_cell();
        send_raw_message(msg, 64);
    } else {
        throw(1000);  ;; Unknown operation
    }
}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    var cs = in_msg;
    var (seqno, balance, owner_address, channel_id) = load_channel_data();
    var msg_seqno = cs~load_uint(32);
    throw_unless(403, msg_seqno == seqno);
    var valid_until = cs~load_uint(32);
    throw_unless(404, now() <= valid_until);
    var withdraw_amount = cs~load_coins();
    throw_unless(405, withdraw_amount <= balance);
    var hash = slice_hash(in_msg);
    throw_unless(406, check_signature(hash, signature, owner_address.preload_uint(256)));
    raw_reserve(withdraw_amount, 0);
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(owner_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(2, 32)  ;; op for withdraw (op::withdraw)
        .store_uint(channel_id, 32)
        .store_coins(withdraw_amount)
        .end_cell(), 128);
    balance -= withdraw_amount;
    save_channel_data(seqno + 1, balance, owner_address, channel_id);
}

;; Verify Plonky2 proof externally
int verify_plonky2_proof_external(cell proof_cell, cell public_inputs_cell) method_id {
    slice public_inputs = public_inputs_cell.begin_parse();
    slice proof = proof_cell.begin_parse();
    return verify_plonky2_proof(proof, public_inputs);
}

(int, int, slice, int) get_channel_state() method_id {
    return load_channel_data();
}
